# If not running interactively, don't do anything
case $- in
	*i*) ;;
	  *) return;;
esac


# Functions ---------------------------------------------------------------
function cd_func ()
{
	local x2 the_new_dir adir index
	local -i cnt

	if [[ $1 ==  "--" ]]; then
		dirs -v
		return 0
	fi

	the_new_dir=$1
	[[ -z $1 ]] && the_new_dir=$HOME

	if [[ ${the_new_dir:0:1} == '-' ]]; then
		#
		# Extract dir N from dirs
		index=${the_new_dir:1}
		[[ -z $index ]] && index=1
		adir=$(dirs +$index)
		[[ -z $adir ]] && return 1
		the_new_dir=$adir
	fi

	#
	# '~' has to be substituted by ${HOME}
	[[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

	#
	# Now change to the new dir and add to the top of the stack
	pushd "${the_new_dir}" > /dev/null
	[[ $? -ne 0 ]] && return 1
	the_new_dir=$(pwd)

	#
	# Trim down everything beyond 11th entry
	popd -n +11 2>/dev/null 1>/dev/null

	#
	# Remove any other occurence of this dir, skipping the top of the stack
	for ((cnt=1; cnt <= 10; cnt++)); do
		x2=$(dirs +${cnt} 2>/dev/null)
		[[ $? -ne 0 ]] && return 0
		[[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
		if [[ "${x2}" == "${the_new_dir}" ]]; then
			popd -n +$cnt 2>/dev/null 1>/dev/null
			cnt=cnt-1
		fi
	done

	return 0
}

function working_directory() {
	dir=`pwd`
	in_home=0
	if [[ `pwd` =~ ^$HOME($|\/) ]]; then
		dir="~${dir#$HOME}"
		in_home=1
	fi

	if [[ `tput cols` -lt 120 ]]; then		# <-- Checking the term width
		first="/`echo $dir | cut -d / -f 2`"
		letter=${first:0:2}
		if [[ $in_home == 1 ]]; then
			letter="~$letter"
		fi
		proj=`echo $dir | cut -d / -f 3`
		beginning="$letter/$proj"
		end=`echo "$dir" | rev | cut -d / -f1 | rev`

		if [[ $proj == "" ]]; then
			echo $dir
		elif [[ $proj == "~" ]]; then
			echo $dir
		elif [[ $dir =~ "$first/$proj"$ ]]; then
			echo $beginning
		elif [[ $dir =~ "$first/$proj/$end"$ ]]; then
			echo "$beginning/$end"
		else
			echo "$beginning/…/$end"
		fi
	else
		echo $dir
	fi
}

function prompt() {
	if [[ $? -eq 0 ]]; then
		if [[ "$EUID" -ne 0 ]]; then
			exit_status=' \[\e[0;31m\]❯\[\e[0;33m\]❯\[\e[0;32m\]❯ \[\e[00m\]'
		else
			exit_status='\[\e[0;34m\]# \[\e[00m\]'
		fi
	else
		if [[ "$EUID" -ne 0 ]]; then
			exit_status=' \[\e[0;31m\]❯\[\e[0;31m\]❯\[\e[0;31m\]❯ \[\e[00m\]'
		else
			exit_status='\[\e[0;31m\]# \[\e[00m\]'
		fi
	fi

	prompt='\[\e[0;32m\][\#]\[\e[00m\]\[\e[1;31m\][\u\[\e[0;37m\]@\h\[\e[1;31m\]]\[\e[00m\]\[\e[0;33m\]$(working_directory)\[\e[00m\]'
	PS1=$prompt$exit_status
}

function cgrep() {
	if [[ $# >1 ]]
	then
		find $2 $3 $4 -regex '.*\.[c,h,cc,cpp]' -exec grep "$1" {} --color=auto -Hn \;
	else
		find . -regex '.*\.[c,h,cc,cpp]' -exec grep "$1" {} --color=auto -Hn \;
	fi
}

function cgrepi() {
	if [[ $# >1 ]]
	then
		find $2 $3 $4 -regex '.*\.[c,h,cc,cpp]' -exec grep "$1" {} --color=auto -Hin \;
	else
		find . -regex '.*\.[c,h,cc,cpp]' -exec grep "$1" {} --color=auto -Hin \;
	fi
}

function filegrep() {
	if [[ $# > 1 ]]
	then
		find . -name "${1}" -exec grep -nIH --color=auto "$2" {} \;
	else
		echo "Usage: filegrep <files> <search-term>"
	fi
}

function patchdiff() {
	cp "$1" tmp.XXX && \
		patch "$1" "$2" && \
		vimdiff tmp.XXX "$1" && \
		mv tmp.XXX "$1"
}

function --() {
	X_DATE=`date`
	X_WORD_LENGTH_TOTAL=$(expr length "${X_DATE}")
	X_WORD_LENGTH_HALF=$((${X_WORD_LENGTH_TOTAL} / 2))
	X_WORD_LENGTH=$((${X_WORD_LENGTH_HALF} + 1))
	X_TERM_LENGTH=$(tput cols)
	X_TERM_SIZE=$((${X_TERM_LENGTH} / 2))
	X_SIZE=$((${X_TERM_SIZE} - ${X_WORD_LENGTH}))
	printf -v DASH '\e[0;31m%*s\e[00m' ${X_SIZE}
	DASH="${DASH// /─}"
	echo "${DASH} ${X_DATE} ${DASH}"
}

function -() {
	if [[ $# > 0 ]]
	then
		X_WORD_LENGTH_TOTAL=$(expr length "$1")
		X_WORD_LENGTH_HALF=$((${X_WORD_LENGTH_TOTAL} / 2))
		X_WORD_LENGTH=$((${X_WORD_LENGTH_HALF} + 1))
		X_TERM_LENGTH=$(tput cols)
		X_TERM_SIZE=$((${X_TERM_LENGTH} / 2))
		X_SIZE=$((${X_TERM_SIZE} - ${X_WORD_LENGTH}))
		printf -v DASH '\e[0;31m%*s\e[00m' ${X_SIZE}
		DASH="${DASH// /─}"
		echo "${DASH} ${1} ${DASH}"
	else
		printf -v DASH '\e[0;31m%*s\e[00m' $(tput cols)
		DASH="${DASH// /─}"
		echo "${DASH}"
	fi
}

function ver {
	if [[ $# > 0 ]]
	then
		strings -n 20 "$1" | tail -n 1 | awk '{print $1}'
	fi
}

function xe() {
	if [[ $OSTYPE == darwin* ]]; then
		wget -qO- "http://www.google.com/finance/converter?a=$1&from=$2&to=$3&hl=es" |	gsed '/res/!d;s/<[^>]*>//g';
	else
		wget -qO- "http://www.google.com/finance/converter?a=$1&from=$2&to=$3&hl=es" |	sed '/res/!d;s/<[^>]*>//g';
	fi
}

function calc() {
	echo "$(($@))"
}

function stock() {
	curl -s "http://download.finance.yahoo.com/d/quotes.csv?s=$1&f=l1"
}

function pass() {
	if [[ $# > 0 ]]
	then
		if [[ $OSTYPE == darwin* ]]; then
			pwgen -sy $* 1 | pbcopy | pbpaste; echo “Has been copied to clipboard”
		else
			pwgen -sy $* 1
		fi
	else
		echo "Usage: pass <length> [<options>]"
	fi
}

##
## Simple password management in ksh-compatible shell
## You'll need a unix-like system and a working GPG configuration
function pwgrep() {
	ASCFILE=$HOME/.auth/pwdb.asc
	gpg -q -d -r $GPGKEY $ASCFILE | grep $*
}

function pwcat() {
	if [[ -z "$1" ]]; then
		ASCFILE=$HOME/.auth/pwdb.asc
	else
		if [[ -f "$1" ]]; then
			ASCFILE=$1
		else
			if [[ -f "$HOME/.auth/$1.asc" ]]; then
				ASCFILE=$HOME/.auth/$1.asc
			else
				ASCFILE=$1
			fi
		fi
	fi
	gpg -q -d -r $GPGKEY $ASCFILE
}

function pwinit() {
	if [[ -z "$1" ]]; then
		ASCFILE=$HOME/.auth/pwdb.asc
		mkdir -p $HOME/.auth
	else
		ASCFILE=$1
	fi
	if [[ ! -f $ASCFILE ]]; then
		echo -n | gpg -q -a -e -r $GPGKEY > $ASCFILE
	else
		cat $ASCFILE | gpg -q -a -e -r $GPGKEY > $ASCFILE.asc
		srm -f $ASCFILE
	fi
}

function pwedit() {
	[ -z $EDITOR ] && EDITOR=vim
	if [[ -z "$1" ]]; then
		ASCFILE=$HOME/.auth/pwdb.asc
	else
		if [[ -f "$1" ]]; then
			ASCFILE=$1
		else
			if [[ -f "$HOME/.auth/$1.asc" ]]; then
				ASCFILE=$HOME/.auth/$1.asc
			else
				ASCFILE=$1
			fi
		fi
	fi
	file=`mktemp /tmp/pwedit.XXXXXX`
	gpg -q -d -r $GPGKEY $ASCFILE > $file				&& \
			$EDITOR $file								&& \
			gpg -q -a -e -r $GPGKEY $file				&& \
			mv ${file}.asc $ASCFILE
	srm -f $file ${file}.asc
}


# Enable color support of ls
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dir_colors && eval "$(dircolors -b ~/.dir_colors)" || eval "$(dircolors -b)"
fi

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/base16-railscasts.dark.sh"
if [[ -s $BASE16_SHELL ]]; then
	source $BASE16_SHELL
else
	git clone https://github.com/chriskempson/base16-shell.git $HOME/.config/base16-shell
	source $BASE16_SHELL
fi

# bash-completion
if [[ -s /usr/share/bash-completion/bash_completion ]]; then
	. /usr/share/bash-completion/bash_completion
fi

# Aliases -----------------------------------------------------------------
if [[ $OSTYPE == darwin* ]]; then
	alias ls='ls -GF'
	alias lock="open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app"

	# Quick way to rebuild the Launch Services database and get rid
	# of duplicates in the Open With submenu.
	alias fixopenwith='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'
elif [[ $OSTYPE == linux* ]]; then
	alias ls='ls --color=auto -F'
	alias open='xdg-open'
fi
alias t='python ~/Code/t/t.py --task-dir ~/Dropbox/Tasks --list tasks --delete-if-empty'
alias ifconfig.me='curl ifconfig.me'
alias cmus='cd ~/Music/songs && cmus && cd -'
alias grep='grep 2>/dev/null -I --exclude=tags --exclude=cscope* --exclude-dir=.git --exclude-dir=.svn -n --color=auto'
alias branches='git log --all --graph --decorate --oneline --simplify-by-decoration'
alias clea='clear'
alias less='vimpager'
alias rls='ls'
alias df='df -h'
alias du='du -h'
alias vi='vim'
alias cd=cd_func


# Variables ---------------------------------------------------------------
export PROMPT_COMMAND=prompt
export PS2="--> "
export PATH=/usr/local/sbin:/usr/local/bin:~/scripts:$PATH
export GPGKEY=FFFFFFFF
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export GIT_EDITOR=vim
export EDITOR=vim
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls:pwgrep*:pwedit*:pwcat*'
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoreboth
export PAGER=vimpager

# Make vim show 256 colors properly even when using tmux
if [[ -z $TMUX ]]; then
	if [[ $OSTYPE == darwin* ]]; then
		export TERM='xterm-256color'
	else
		if [ -e /usr/share/terminfo/x/xterm+256color ]; then
			export TERM='xterm-256color'
		else
			export TERM='xterm'
		fi
	fi
else
	if [[ $OSTYPE == darwin* ]]; then
		export TERM='screen-256color'
	else
		if [ -e /usr/share/terminfo/s/screen-256color ]; then
			export TERM='screen-256color'
		else
			export TERM='screen'
		fi
	fi
fi


# Settings ----------------------------------------------------------------
set meta-flag on
set input-meta on
set output-meta on
set convert-meta off
set -o vi


# Keybindings -------------------------------------------------------------
bind '"\C-k": kill-whole-line'
bind '"\C-w": shell-kill-word'


# Options -----------------------------------------------------------------
shopt -s histappend				# Append rather than overwrite the history on disk
shopt -s cdspell				# Ignore small typos when changing directory
shopt -s nocaseglob				# Case-insensitive filename globbing
shopt -s checkwinsize			# Update LINES and COLUMNS based on window size
