set nocompatible				" Makes vim behave in a more useful way than vi-compatible mode

" Initialize --------------------------------------------------------- {{{
if !filereadable(expand('$HOME/.vimrc'))
	echo "Linking .vimrc..."
	echo ""
	silent !ln -s $HOME/.vim/vimrc $HOME/vimrc
endif

if !filereadable(expand('$HOME/.fonts/ubuntu-mono-powerline-ttf/README.md'))
	echo "Fixing fonts..."
	echo ""
	silent !git clone https://github.com/pdf/ubuntu-mono-powerline-ttf.git $HOME/.fonts/ubuntu-mono-powerline-ttf
endif
" }}}

" Plugins ------------------------------------------------------------ {{{
" If vim-plug isn't installed, install it. If it is installed, update
" it and activate the bundles
let plug_vim_initialized=1
let plug_vim=expand('$HOME/.vim/autoload/plug.vim')
if !filereadable(plug_vim)
	echo "Installing vim-plug..."
	echo ""
	silent !curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	let plug_vim_initialized=0
endif
call plug#begin('$HOME/.vim/bundle')

" Plugins here
Plug 'https://github.com/itchyny/lightline.vim.git'
Plug 'https://github.com/vim-scripts/taglist.vim.git', { 'on': 'TlistOpen' }
Plug 'https://github.com/airblade/vim-gitgutter.git'
Plug 'https://github.com/ciaranm/detectindent'
Plug 'https://github.com/Lokaltog/vim-easymotion.git'
Plug 'https://github.com/majutsushi/tagbar.git'
Plug 'https://github.com/vim-scripts/Mark--Karkat'
Plug 'https://github.com/kshenoy/vim-signature'
Plug 'https://github.com/jamessan/vim-gnupg'
Plug 'https://github.com/chriskempson/base16-vim'
Plug 'https://github.com/justinmk/vim-syntax-extra'
Plug 'https://github.com/ap/vim-buftabline'
Plug 'https://github.com/junegunn/vim-peekaboo'
Plug 'https://github.com/Yggdroot/indentLine'
Plug 'https://github.com/mhinz/vim-startify'
Plug 'https://github.com/luochen1990/rainbow'
Plug 'https://github.com/NLKNguyen/papercolor-theme'
Plug 'https://github.com/tpope/vim-commentary'

call plug#end()

if plug_vim_initialized==0
	echo "Installing Plugs..."
	echo ""
	:PlugInstall
endif

let g:EasyMotion_leader_key = '<Leader><Leader>'
let g:EasyMotion_smartcase = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indentLine_char = '│'
let g:rainbow_active = 1

" Make base16 work with extended color space of shell
if $TERM != "putty-256color"
	let g:base16colorspace=256
endif

let g:lightline = {
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ], [ 'filename' ], [ 'linenumber' ] ],
	\   'right': [ ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ], ['funcname'] ]
	\ },
	\ 'component_function': {
	\	'linenumber': 'MyLineNumber',
	\   'filename': 'MyFilename',
	\   'fileformat': 'MyFileformat',
	\   'filetype': 'MyFiletype',
	\   'fileencoding': 'MyFileencoding',
	\   'mode': 'MyMode',
	\   'funcname': 'MyFuncName',
	\ }
	\ }

let g:startify_custom_header =
	\ map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']
let g:startify_session_dir = "$HOME/.vim/sessions"
" }}}


" General Options --------------------------------------------------- {{{
let mapleader=","				" Set <leader> to ,
set relativenumber				" Show relative line numbers
set showmatch					" Show matching braces
set cursorline					" Highlight the current line
set incsearch					" Incremental search
set ic							" Ignore case when searching ...
set smartcase					" ... except explicit CAPS
set hlsearch					" Highlight all search results
set nocompatible				" Makes vim behave in a more useful way than vi-compatible mode
set exrc						" Execute .vimrc files present in working directory
set secure						" Restrict usage of some commands in non-default .vimrc files
set tabstop=4					" Set tab size to 4 characters
set shiftwidth=4				" Set autoindent tab size
syntax enable					" Enable syntax highlighting
set bg=dark						" Set background to dark
set laststatus=2				" Always show statusline
set backspace=indent,eol,start	" Make backspace actually work
set modelines=0					" Prevent some security exploits
set gdefault					" Apply substitutions globally on lines
set nrformats=hex				" Don't assume zero padded numbers are octal base when using <C-a>/<C-x>
set timeoutlen=300				" Change timeout for mapped keys to 300ms
set noswapfile					" Don't use a swap file
set nobackup					" Don't use a backup file
set diffopt+=iwhite				" Ignore whitespace in vimdiff
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·
set wildmenu                    " make tab completion for files/buffers act like bash
set wildmode=list:full          " show a list when pressing tab and complete
                                " first full match
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,*.a

filetype plugin indent on		" Enable filetype detection, and load the plugin and indent files for that filetype
colorscheme base16-railscasts	" Use 'base16-railscasts' colorscheme
if &diff
	colorscheme PaperColor		" Use bright colorscheme for vimdiff
endif

" Currently unused
"set expandtab					" Insert spaces instead of tab character
"set softtabstop=4				" Set soft tab to 4 characters
"set foldmethod=syntax			" Set the fold method to 'syntax'
"set nofoldenable				" Start with no folding
"set foldlevel=255				" Set the fold level to the highest value

" Ctags file
set tags=./tags;/

" Make sure 256 color terminal support is used
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
	set t_Co=256
endif

" Cscope
if has ("cscope")
	" use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
	set cscopetag

	" Don't indicate success/failure messages
	set nocscopeverbose

	" 1 = check ctags for definition of a symbol before checking cscope
	" 0 = reverse
	set csto=1

	" add any cscope database in current directory
	" note: this is better than the autoload_cscope plugin because it allows 'vim -t {tag}' from the command line
	if filereadable("cscope.out")
		cs add cscope.out
		" else search up a few directories
	elseif filereadable("../cscope.out")
		cs add ../cscope.out
	elseif filereadable("../../cscope.out")
		cs add ../../cscope.out
	elseif filereadable("../../../cscope.out")
		cs add ../../../cscope.out
	elseif filereadable("../../../../cscope.out")
		cs add ../../../../cscope.out
	elseif filereadable("../../../../../cscope.out")
		cs add ../../../../../cscope.out
	elseif filereadable("../../../../../../cscope.out")
		cs add ../../../../../../cscope.out
	elseif filereadable("../../../../../../../cscope.out")
		cs add ../../../../../../../cscope.out
	elseif filereadable("../../../../../../../../cscope.out")
		cs add ../../../../../../../../cscope.out
	elseif filereadable("../../../../../../../../../cscope.out")
		cs add ../../../../../../../../../cscope.out
	elseif filereadable("../../../../../../../../../../cscope.out")
		cs add ../../../../../../../../../../cscope.out
		" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif

	" The following maps all invoke one of the following cscope search types:
	" (note: <C-@> = <C-Space> = Ctrl+Space
	"
	"   's'   symbol: find all references to the token under cursor
	"   'g'   global: find global definition(s) of the token under cursor
	"   'c'   calls:  find all calls to the function name under cursor
	"   't'   text:   find all instances of the text under cursor
	"   'e'   egrep:  egrep search for the word under cursor
	"   'f'   file:   open the filename under cursor
	"   'i'   includes: find files that include the filename under cursor
	"   'd'   called: find functions that function under cursor calls
	nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>

	" Ctrl+space+space will open cscope results in vertically split window
	nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif

" Jump to last position when reopening a file
if has("autocmd")
	au BufReadPost *.c,*.h if line("'\"") > 0 && line("'\"") <= line("$")
		\| exe "normal! g'\"" | endif
endif

" }}}


" Key Mappings ------------------------------------------------------ {{{

" Turn off highlighted search results
nnoremap \q :nohlsearch<CR>
nnoremap \Q :nohlsearch<CR>:MarkClear<CR>

" Change entire file between softtabs and hardtabs
nnoremap \t :setlocal expandtab!<CR>:setlocal softtabstop=4<CR>:retab!<CR>
nnoremap \T :setlocal noexpandtab<CR>:setlocal tabstop=4<CR>:setlocal shiftwidth=4<CR>:retab!<CR>

" Hotkeys for toggle of line numbers and paste mode
nnoremap \l :setlocal relativenumber!<CR>
nnoremap \p :setlocal paste!<CR>

" Toggle showing trailing whitespaces
nnoremap \w :ShowTrailingWhitespaces<CR>

" Toggle highlighting characters for long lines
nnoremap \o :HightlighLongLines<CR>

" Use tab for indention
nnoremap <tab> >>
nnoremap <S-tab> <<
vnoremap <tab> >gv
vnoremap <S-tab> <gv

" Code folding shortcuts
nnoremap <space> za			" Collapse current fold
" nnoremap [ zM				" Collapse entire file
" nnoremap ] zR				" Un-collapse entire file
" vnoremap <space> zf

" Change text encoding to Japanese Shift-JIS with Ctrl-J
nnoremap <C-j> :setlocal encoding=sjis<CR>:setlocal fileencodings=cp932<CR>:e!<CR>

" Disable arrow keys to force learning hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Map key for TagList plugin (show functions)
nnoremap ff :TlistOpen<CR>

" Map key for DiffSaved function
nnoremap shit :DiffSaved<CR>

" Map key/command for PlugUpdate function (update plugins)
nnoremap update :PlugUpdate<CR>

" Map key/command for PlugClean function (clean plugins)
nnoremap clean :PlugClean!<CR>

" Make j/k move one single row instead of one single line
nnoremap j gj
nnoremap k gk

" Stop that window from popping up ;-)
map q: :q

" Use buffers like tabs
set hidden
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>

" Keymappings for easy editing for vimrc file
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Map key for Tagbar plugin (show tags)
nnoremap <silent> <leader>b :TagbarToggle<CR>

" Vertical split for tags
nnoremap <leader>vs :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" List contents of all registers (that typically contain pasteable text).
"nnoremap <silent> "" :registers "0123456789abcdefghijklmnopqrstuvwxyz*+.<CR>

" Indent and unindent without leaving visual mode
vnoremap < <gv
vnoremap > >gv

" Make :W same as :w, and :Q same as :q
command! W :w
command! Q :q
" }}}


" Functions --------------------------------------------------------- {{{
function! s:ToggleHighlightLongLines()
	if !exists("s:highlight_long_lines_enabled")
		let s:highlight_long_lines_enabled = 0
	endif
	if s:highlight_long_lines_enabled
		highlight clear OverLength
		autocmd! InsertLeave *.c,*.h
		let s:highlight_long_lines_enabled = 0
	else
		" Make any text wider than 100 char highlight in red
		highlight OverLength ctermbg=red ctermfg=white guibg=#592929
		match OverLength /\%101v.\+/
		autocmd InsertLeave *.c,*.h redraw!
		let s:highlight_long_lines_enabled = 1
	endif
endfunction
command! HightlighLongLines call s:ToggleHighlightLongLines()

function! s:ToggleTrailingWhitespaces()
	if !exists("s:trailing_whitespaces_enabled")
		let s:trailing_whitespaces_enabled = 0
	endif
	if s:trailing_whitespaces_enabled
		highlight clear TrailingWhitespace
		autocmd! InsertLeave *
		let s:trailing_whitespaces_enabled = 0
	else
		highlight TrailingWhitespace ctermbg=red ctermfg=white guibg=#592929
		match TrailingWhitespace /\s\+\%#\@<!$/
		autocmd InsertLeave * redraw!
		let s:trailing_whitespaces_enabled = 1
	endif
endfunction
command! ShowTrailingWhitespaces call s:ToggleTrailingWhitespaces()

function! s:DiffWithSaved()
	let filetype=&ft
	diffthis
	vnew | r # | normal! 1Gdd
	diffthis
	exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
command! DiffSaved call s:DiffWithSaved()

function! MyModified()
	return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
	return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyLineNumber()
	return line(".")
endfunction

function! MyFilename()
	let fname = expand('%:t')
	return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
				\ ('' != fname ? fname : '[No Name]') .
				\ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
	return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
	return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
	let fname = expand('%:t')
	return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! MyFuncName()
	return tagbar#currenttag('%s','')
endfunction
" }}}


" Srt Specific ----------------------------------------------------- {{{
augroup SRT
	au!

	" Recognize srt files for syntax highlighting
	au BufRead,BufNewFile *.srt		setfiletype srt

	" Move to the next subtitle in a srt file
	au BufRead *.srt nnoremap nn :execute "normal! /^\\d\\+$\rjjzz:setlocal nohlsearch\r"<cr>
augroup END
" }}}


" Mutt Specific ----------------------------------------------------- {{{
" F1 through F3 re-wraps paragraphs in useful ways
augroup MUTT
	au!
	au BufRead $HOME/.mutt/temp/mutt* set spell " <-- vim 7 required
	au BufRead $HOME/.mutt/temp/mutt* nmap  <F1>	gqap
	au BufRead $HOME/.mutt/temp/mutt* nmap  <F2>	gqqj
	au BufRead $HOME/.mutt/temp/mutt* nmap  <F3>	kgqj
	au BufRead $HOME/.mutt/temp/mutt* map!  <F1>	<ESC>gqapi
	au BufRead $HOME/.mutt/temp/mutt* map!  <F2>	<ESC>gqqji
	au BufRead $HOME/.mutt/temp/mutt* map!  <F3>	<ESC>kgqji
augroup END
" }}}


" Exceptions ----------------------------------------------------- {{{
if has("autocmd")
	" This file takes exceptionally long to load with tagbar, so have tagbar ignore it
	autocmd BufReadPre wlioctl.h let b:tagbar_ignore = 1

	" Only turn on cindent for *.c files
	autocmd BufReadPre *.c set cindent

	" Clear trailing whitespace before a save
	autocmd BufWritePre * :%s/\s\+$//e | retab
endif
" }}}

" Persistent Undo -------------------------------------------------- {{{
if has('persistent_undo')
	let _undodir = expand('$HOME/.vim/undo')

	" Create $HOME/.vim/undo if it doesn't already exist
	silent call system('mkdir -p ' . _undodir)

	set undofile				" Save undo's after file closes
	let &undodir=_undodir		" where to save undo histories
	set undolevels=1000			" How many undos
	set undoreload=10000		" number of lines to save for undo
endif
