set nocompatible				" Makes vim behave in a more useful way than vi-compatible mode

" Initialize --------------------------------------------------------- {{{
if !filereadable(expand('~/.vimrc'))
  echo "Linking .vimrc..."
  echo ""
  silent !ln -s ~/.vim/vimrc ~/.vimrc
endif

if !filereadable(expand('~/.fonts/ubuntu-mono-powerline-ttf/README.md'))
  echo "Fixing fonts..."
  echo ""
  silent !git clone https://github.com/pdf/ubuntu-mono-powerline-ttf.git ~/.fonts/ubuntu-mono-powerline-ttf
endif
" }}}

" Plugins ------------------------------------------------------------ {{{
" If vundle isn't installed, install it. If it is installed, update
" it and activate the bundles
let vundle_initialized=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle..."
  echo ""
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
  let vundle_initialized=0
endif
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
Bundle 'gmarik/vundle'

" Plugins here
Bundle 'https://github.com/Lokaltog/vim-powerline.git'
Bundle 'https://github.com/altercation/vim-colors-solarized.git'
Bundle 'https://github.com/kien/ctrlp.vim.git'
Bundle 'https://github.com/tpope/vim-pathogen.git'
Bundle 'https://github.com/vim-scripts/taglist.vim.git'
Bundle 'https://github.com/airblade/vim-gitgutter.git'
Bundle 'https://github.com/tpope/vim-sleuth.git'
Bundle 'https://github.com/Lokaltog/vim-easymotion.git'
Bundle 'https://github.com/goldfeld/vim-seek.git'
Bundle 'https://github.com/majutsushi/tagbar.git'
Bundle 'https://github.com/steffanc/cscopemaps.vim'
Bundle 'https://github.com/scrooloose/nerdtree.git'
Bundle 'https://github.com/vim-scripts/Mark--Karkat'
Bundle 'https://github.com/kshenoy/vim-signature'
Bundle 'https://github.com/nathanaelkane/vim-indent-guides'
Bundle 'https://github.com/vim-scripts/autoload_cscope.vim'

let g:vundle_default_git_proto='git'
if vundle_initialized==0
	echo "Installing Bundles..."
	echo ""
	:BundleInstall
endif

let g:Powerline_symbols = 'fancy'
let g:EasyMotion_leader_key = '<Leader>'
let g:indent_guides_enable_on_vim_startup = 1

" Make solarized work nicely over SSH(!)
let g:solarized_termcolors=256
let g:solarized_termtrans=1
" Don't use the plugin's keymapping for cscope
let g:autocscope_menus=0
" }}}


" General Options --------------------------------------------------- {{{
let mapleader=","				" Set <leader> to ,
set number					" Show line numbers
set showmatch					" Show matching braces
set cursorline					" Highlight the current line
set incsearch					" Incremental search
set ic						" Ignore case when searching ... 
set smartcase					" ... except explicit CAPS
set hlsearch					" Highlight all search results
set nocompatible				" Makes vim behave in a more useful way than vi-compatible mode
set tabstop=4					" Set tab size to 4 characters
set shiftwidth=4				" Set autoindent tab size
" set expandtab					" Insert spaces instead of tab character
" set softtabstop=4				" Set soft tab to 4 characters
syntax enable					" Enable syntax highlighting
set bg=dark					" Set background to dark
"set foldmethod=syntax				" Set the fold method to 'syntax'
"set nofoldenable				" Start with no folding
"set foldlevel=255				" Set the fold level to the highest value
set laststatus=2				" Always show statusline
filetype plugin indent on			" Enable filetype detection, and load the plugin and indent files for that filetype
colorscheme solarized				" Use 'solarized' colorscheme

" Ctags file
set tags=./tags;/

" Make sure 256 color terminal support is used
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
	set t_Co=256
endif

" Make any text wider than 100 char highlight in red
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%101v.\+/

" Cscope
if has ("cscope")
  " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
  set cscopetag

  " check ctags for definition of a symbol before checking cscope: set to 0
  " for reverse
  set csto=0

  " add any cscope database in current directory
  if filereadable("cscope.out")
    cs add cscope.out
  endif

  " The following maps all invoke one of the following cscope search types:
  " (note: <C-@> = <C-Space> = Ctrl+Space
  "
  "   's'   symbol: find all references to the token under cursor
  "   'g'   global: find global definition(s) of the token under cursor
  "   'c'   calls:  find all calls to the function name under cursor
  "   't'   text:   find all instances of the text under cursor
  "   'e'   egrep:  egrep search for the word under cursor
  "   'f'   file:   open the filename under cursor
  "   'i'   includes: find files that include the filename under cursor
  "   'd'   called: find functions that function under cursor calls
  nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
  nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>

  " Ctrl+space+space will open cscope results in vertically split window
  nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif

" Make any text wider than 80 char highlight in red
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/


" }}}


" Key Mappings ------------------------------------------------------ {{{

" Turn off highlighted search results
nnoremap \q :nohlsearch<CR>

" Change entire file between softtabs and hardtabs
nnoremap \t :setlocal expandtab!<CR>:setlocal softtabstop=4<CR>:retab!<CR>
nnoremap \T :setlocal noexpandtab<CR>:setlocal tabstop=4<CR>:setlocal shiftwidth=4<CR>:retab!<CR>

" Hotkeys for toggle of line numbers and paste mode
nnoremap \l :setlocal number!<CR>
nnoremap \p :setlocal paste!<CR>

" Code folding shortcuts
nnoremap <space> za			" Collapse current fold
" nnoremap [ zM				" Collapse entire file
" nnoremap ] zR				" Un-collapse entire file
vnoremap <space> zf

" Change text encoding to Japanese Shift-JIS with Ctrl-J
nnoremap <C-j> :setlocal encoding=sjis<CR>:setlocal fileencodings=cp932<CR>:e!<CR>

" Disable arrow keys to force learning hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Map key for TagList plugin (show functions)
nnoremap ff :TlistOpen<CR>

" Map key for DiffSaved function
nnoremap shit :DiffSaved<CR>

" Map key/command for BundleUpdate function (update plugins)
nnoremap update :BundleUpdate<CR>

" Make j/k move one single row instead of one single line
nnoremap j gj
nnoremap k gk

" Keymappings for easy editing for vimrc file
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Map key for Tagbar plugin (show tags)
nnoremap <silent> <leader>b :TagbarToggle<CR>

" Map key for NERDTree plugin 
nnoremap <silent> <leader>f :NERDTreeToggle<CR>

" Vertical split for tags
nnoremap <leader>vs :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" }}}


" Functions --------------------------------------------------------- {{{
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
" }}}


" Srt Specific ----------------------------------------------------- {{{
augroup SRT
  au!

  " Recognize srt files for syntax highlighting
  au BufRead,BufNewFile *.srt		setfiletype srt

  " Move to the next subtitle in a srt file
  au BufRead *.srt nnoremap nn :execute "normal! /^\\d\\+$\rjjzz:setlocal nohlsearch\r"<cr>
augroup END
" }}}


" Mutt Specific ----------------------------------------------------- {{{
" F1 through F3 re-wraps paragraphs in useful ways
augroup MUTT
  au!
  au BufRead ~/.mutt/temp/mutt* set spell " <-- vim 7 required
  au BufRead ~/.mutt/temp/mutt* nmap  <F1>	gqap
  au BufRead ~/.mutt/temp/mutt* nmap  <F2>	gqqj
  au BufRead ~/.mutt/temp/mutt* nmap  <F3>	kgqj
  au BufRead ~/.mutt/temp/mutt* map!  <F1>	<ESC>gqapi
  au BufRead ~/.mutt/temp/mutt* map!  <F2>	<ESC>gqqji
  au BufRead ~/.mutt/temp/mutt* map!  <F3>	<ESC>kgqji
augroup END
" }}}
